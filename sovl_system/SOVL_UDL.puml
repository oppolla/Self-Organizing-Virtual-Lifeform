@startuml SOVL System Architecture

' =============================
' Core System Orchestration
' =============================
package "Orchestration" {
    class SOVLOrchestrator {
        +config_manager: ConfigManager
        +state_manager: StateManager
        +model_manager: ModelManager
        +ram_manager: RAMManager
        +gpu_manager: GPUMemoryManager
        +error_manager: ErrorManager
        +system_monitor: SystemMonitor
        +memory_monitor: MemoryMonitor
        +traits_monitor: TraitsMonitor
        +logger: Logger
        +device: torch.device
        +run(): None
        +shutdown(): None
    }
    class Conductor {
        +config_manager: ConfigManager
        +logger: Logger
        +ram_manager: RAMManager
        +gpu_manager: GPUMemoryManager
        +check_memory_health(): Dict[str, Any]
    }
}

' =============================
' System Context & State
' =============================
package "System Context" {
    class SystemContext {
        +config_path: str
        +device: str
        +logger: Logger
        +resource_locks: Dict[str, Lock]
        +component_states: Dict[str, Any]
        +error_history: deque
        +get_session_id(): str
        +update_component_state(component_name: str, state: Dict[str, Any]): None
        +record_error(error: Exception, context: Dict[str, Any]): None
        +update_memory_usage(): None
        +get_system_state(): Dict[str, Any]
    }
    class SystemConstants {
        +DEFAULT_DEVICE: str
        +DEFAULT_CONFIG_PATH: str
        +MIN_MEMORY_THRESHOLD: float
        +MAX_MEMORY_THRESHOLD: float
        +MAX_ERROR_HISTORY: int
        +LOG_BUFFER_SIZE: int
    }
}

' =============================
' Model, Scaffold, and Training
' =============================
package "Model & Training" {
    class ModelManager {
        +base_model: nn.Module
        +scaffold_models: List[nn.Module]
        +base_tokenizer: Any
        +scaffold_tokenizers: List[Any]
        +quantization_mode: str
        +active_lora_checkpoint: str
        +load_models(lora_checkpoint_path: str): None
        +reload_models(): None
        +cleanup(): None
    }
    class ScaffoldTokenMapper {
        +base_tokenizer: Any
        +scaffold_tokenizer: Any
        +get_token_map(): Dict
        +tokenize_and_map(prompt: str): Any
        +update_token_map_memory(prompt: str, confidence: float): None
    }
    class ScaffoldErrorManager {
        +logger: Logger
        +handle_error(error: Exception, operation: str, context: Dict[str, Any], severity: str): None
    }
    class TrainingManager {
        +config: TrainingConfig
        +model: nn.Module
        +device: torch.device
        +train_step(batch: Dict[str, torch.Tensor]): None
        +validate(val_loader: Any): None
        +save_checkpoint(path: str): None
        +load_checkpoint(path: str): None
    }
    class TrainingConfig {
        +optimizer: OptimizerConfig
        +scheduler: SchedulerConfig
        +memory: MemoryConfig
        +params: TrainingParams
        +logging: LoggingConfig
    }
}

' =============================
' Memory & Monitoring
' =============================
package "Memory & Monitoring" {
    class RAMManager {
        +check_memory_health(): Dict[str, Any]
    }
    class GPUMemoryManager {
        +check_memory_health(): Dict[str, Any]
    }
    class SystemMonitor {
        +logger: Logger
        +ram_manager: RAMManager
        +gpu_manager: GPUMemoryManager
        +error_manager: ErrorManager
    }
    class MemoryMonitor {
        +logger: Logger
        +ram_manager: RAMManager
        +gpu_manager: GPUMemoryManager
        +error_manager: ErrorManager
    }
    class TraitsMonitor {
        +logger: Logger
    }
}

' =============================
' Utilities & Supporting Modules
' =============================
package "Utilities" {
    class Logger {
        +log_event(event_type: str, message: str, level: str, additional_info: Dict): None
        +log_error(error_msg: str, error_type: str, stack_trace: str, additional_info: Dict): None
        +get_recent_events(limit: int): List[Dict]
        +get_recent_errors(limit: int): List[Dict]
    }
    class ErrorManager {
        +error_history: deque
        +handle_error(error: Exception, context: Dict[str, Any]): None
        +get_recent_errors(): List[Dict]
    }
    class ConfigManager {
        +get(key: str, default: Any): Any
    }
    class StateManager {
        +load_state(): Any
        +save_state(state: Any): None
    }
}

' =============================
' Relationships
' =============================
SOVLOrchestrator --> ModelManager
SOVLOrchestrator --> RAMManager
SOVLOrchestrator --> GPUMemoryManager
SOVLOrchestrator --> ErrorManager
SOVLOrchestrator --> SystemMonitor
SOVLOrchestrator --> MemoryMonitor
SOVLOrchestrator --> TraitsMonitor
SOVLOrchestrator --> Logger
SOVLOrchestrator --> StateManager
SOVLOrchestrator --> ConfigManager
SOVLOrchestrator --> SystemContext
ModelManager --> ScaffoldTokenMapper
ModelManager --> ScaffoldErrorManager
ModelManager --> Logger
ModelManager --> ConfigManager
TrainingManager --> TrainingConfig
TrainingManager --> ModelManager
TrainingManager --> Logger
TrainingManager --> ErrorManager
SystemMonitor --> RAMManager
SystemMonitor --> GPUMemoryManager
SystemMonitor --> ErrorManager
MemoryMonitor --> RAMManager
MemoryMonitor --> GPUMemoryManager
MemoryMonitor --> ErrorManager
Logger <-- ErrorManager
Logger <-- SystemMonitor
Logger <-- MemoryMonitor
StateManager --> Logger
StateManager --> ConfigManager
SystemContext --> Logger
SystemContext --> ConfigManager
Conductor --> RAMManager
Conductor --> GPUMemoryManager
Conductor --> MemoriaManager
Conductor --> Logger

@enduml
